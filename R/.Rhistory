source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
source('dists.R')
gen_mix_gmm_and_unif <- function(N, K, Umin, Umax, mu, Sigma, rho, pi) {
d = length(Umin)
X = matrix(rep(0, d* N), ncol = d)
s = rep(0, N)
z = rep(0, N)
for (n in 1: N) {
sn = rbinom(1, 1, rho) # sample s
s[n] = sn
if (sn == 0) { # sample background from a uniform distribution
for (p in 1 :d) {
X[n,p] = runif(1, min = Umin[p], max = Umax[p])
}
} else { # sample signal from a mixture of k multivariate normal
zn = sample(1:K, 1, prob = pi)
z[n] = zn
# Get mu and Sigma for kth normal component
muk = mu[, zn]
Sigmak = Sigma[, , zn]
x = rep(0, d)
while(TRUE) {
ofb = FALSE
x = mvtnorm::rmvnorm(1, mean = muk, sigma = Sigmak)
ofb = any((x < Umin) | (x > Umax)) #outside of allowed region
if(! ofb) {
X[n,] = x
break
}
}
}
}
return(list(X = X, s = s, z = z))
}
gen_mix_king_and_unif <- function(N, K, Umin, Umax, mu, Sigma, eta, rho, pi) {
d = length(Umin)
X = matrix(rep(0, d* N), ncol = d)
s = rep(0, N)
z = rep(0, N)
kings = list()
for(k in 1:K) {
muk = mu[, k]
Sigmak = Sigma[, , k]
kings[[k]] = mvking$new(muk, Sigmak, eta)
}
for (n in 1: N) {
sn = rbinom(1, 1, rho) # sample s
s[n] = sn
if (sn == 0) { # sample background from a uniform distribution
for (p in 1 :d) {
X[n,p] = runif(1, min = Umin[p], max = Umax[p])
}
} else { # sample signal from a mixture of k multivariate normal
zn = sample(1:K, 1, prob = pi)
z[n] = zn
# Get mu and Sigma for kth normal component
x = rep(0, d)
while(TRUE) {
ofb = FALSE
x = kings[[zn]]$rking(1)
ofb = any((x < Umin) | (x > Umax)) #outside of allowed region
if(! ofb) {
X[n,] = x
break
}
}
}
}
return(list(X = X, s = s, z = z))
}
# Construct initial parameters
N = 1000;
d = 2;
K = 2;
# Construct mu and Sigma
I = diag(d);
mu0 = c(-10, 10);
mu = matrix(rep(0, d * K), nrow = 2)
mu[,1] = c(-20, 0)
mu[,2] = c(20, 0)
sigma.2 = 3; # know varaince
v = c();
for (k in 1: K) {
v = c(v, as.vector(sigma.2 * I))
}
Sigma = array(v, c(d, d, K))
# Construct Umin and Umax
Umin = c()
Umax = c()
for (p in 1:d) {
Umax = c(Umax, max(mu[p,]) + 3 * sigma.2)
Umin = c(Umin, min(mu[p,]) - 3 * sigma.2);
}
# Set rho and pi
rho = 0.75;
pi = c(0.65, 0.35)
data_gmm = list()
output_gmm = gen_mix_gmm_and_unif(N, K, Umin, Umax, mu, Sigma, rho, pi)
data_gmm$X = output_gmm$X
data_gmm$s = output_gmm$s
data_gmm$z = output_gmm$z
data_gmm$mu = mu
data_gmm$rho = rho
data_gmm$pi = pi
data_gmm$Sigma = Sigma
data_gmm$lower_bg = Umin
data_gmm$upper_bg = Umax
data_gmm$N = N
data_gmm$K = K
data_gmm$d = d
ggplot() + geom_point(data = data.frame(data_gmm$X), aes(X1, X2))
data_kmm = data_gmm
eta = 1.5
data_kmm$eta = eta
output_kmm = gen_mix_king_and_unif(N, K, Umin, Umax, mu, Sigma, eta, rho, pi)
data_kmm$X = output_kmm$X
data_kmm$s = output_kmm$s
data_kmm$z = output_kmm$z
ggplot() + geom_point(data = data.frame(data_kmm$X), aes(X1, X2))
rm(list=ls()[! ls() %in% c("data_gmm","data_kmm")])
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
data = data_gmm
# plot data
ggplot(data = data.frame(x = data$X[,1], y = data$X[,2])) + geom_point(aes(x, y))
# prepare to run Gibbs
X = as.matrix(data$X)
Ks = 10
Kb = 1
s = rep(1, nrow(X))
sz = kmeans(x = X, Ks)$cluster
bz = rep(0, nrow(X))
init_pars <- get_GMVNComponent_example_init_pars(2)
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
init_pars = init_pars, type = 'DPSignal')
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
init_pars = init_pars, type = 'MFMSignal')
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
init_pars = init_pars, type = 'MFMSignal')
init_pars <- get_GMVNComponent_example_init_pars(2)
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
init_pars = init_pars, type = 'MFMSignal')
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
sig_init_pars = init_pars, type = 'MFMSignal')
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
sig_componentClass = GMVNComponent,
sig_init_pars = init_pars, type = 'MFMSignal')
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
data = data_gmm
# plot data
ggplot(data = data.frame(x = data$X[,1], y = data$X[,2])) + geom_point(aes(x, y))
# prepare to run Gibbs
X = as.matrix(data$X)
Ks = 10
Kb = 1
s = rep(1, nrow(X))
sz = kmeans(x = X, Ks)$cluster
bz = rep(0, nrow(X))
init_pars <- get_GMVNComponent_example_init_pars(2)
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
sig_componentClass = GMVNComponent,
sig_init_pars = init_pars, type = 'MFMSignal')
# run Gibbs
niters = 1000
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
for(k in 1:Kb) {
print(paste(c('Bg cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$collapsed_gibbs()
}
data = data_gmm
# plot data
ggplot(data = data.frame(x = data$X[,1], y = data$X[,2])) + geom_point(aes(x, y))
# prepare to run Gibbs
X = as.matrix(data$X)
Ks = 10
Kb = 1
s = rep(1, nrow(X))
sz = kmeans(x = X, Ks)$cluster
bz = rep(0, nrow(X))
init_pars <- get_GMVNComponent_example_init_pars(2)
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
sig_componentClass = GMVNComponent,
sig_init_pars = init_pars, type = 'MFMSignal')
niters = 10
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
for(k in 1:Ks) {
print(paste(c('Signal cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$collapsed_gibbs()
}
m$signal[[1]]$sig_components
m$signal[[1]]$components
components
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
data = data_gmm
# plot data
ggplot(data = data.frame(x = data$X[,1], y = data$X[,2])) + geom_point(aes(x, y))
# prepare to run Gibbs
X = as.matrix(data$X)
Ks = 10
Kb = 1
s = rep(1, nrow(X))
sz = kmeans(x = X, Ks)$cluster
bz = rep(0, nrow(X))
init_pars <- get_GMVNComponent_example_init_pars(2)
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
sig_componentClass = GMVNComponent,
sig_init_pars = init_pars, type = 'MFMSignal')
# run Gibbs
niters = 10
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
for(k in 1:Ks) {
print(paste(c('Signal cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$collapsed_gibbs()
}
# run Gibbs
niters = 10
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
for(k in 1:Ks) {
print(paste(c('Signal cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$gibbs()
}
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
sig_componentClass = GMVNComponent,
sig_init_pars = init_pars, type = 'MFMSignal')
# run Gibbs
niters = 10
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
for(k in 1:Ks) {
print(paste(c('Signal cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$gibbs()
}
library(ggplot2)
setwd('~/Documents/MixSigBkg/R/')
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
library(ggplot2)
setwd('~/Documents/MixSigBkg/R/')
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
library(ggplot2)
setwd('~/Documents/MixSigBkg/R/')
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
library(ggplot2)
setwd('~/Documents/MixSigBkg/R/')
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
library(ggplot2)
setwd('~/Documents/MixSigBkg/R/')
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
data = data_gmm
# plot data
ggplot(data = data.frame(x = data$X[,1], y = data$X[,2])) + geom_point(aes(x, y))
# prepare to run Gibbs
X = as.matrix(data$X)
Ks = 10
Kb = 1
s = rep(1, nrow(X))
sz = kmeans(x = X, Ks)$cluster
bz = rep(0, nrow(X))
init_pars <- get_GMVNComponent_example_init_pars(2)
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
sig_componentClass = GMVNComponent,
sig_init_pars = init_pars, type = 'MFMSignal')
# run Gibbs
niters = 10
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
for(k in 1:Ks) {
print(paste(c('Signal cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$gibbs()
}
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
data = data_gmm
# plot data
ggplot(data = data.frame(x = data$X[,1], y = data$X[,2])) + geom_point(aes(x, y))
# prepare to run Gibbs
X = as.matrix(data$X)
Ks = 10
Kb = 1
s = rep(1, nrow(X))
sz = kmeans(x = X, Ks)$cluster
bz = rep(0, nrow(X))
init_pars <- get_GMVNComponent_example_init_pars(2)
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
sig_componentClass = GMVNComponent,
sig_init_pars = init_pars, type = 'MFMSignal')
# run Gibbs
niters = 10
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
for(k in 1:Ks) {
print(paste(c('Signal cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$gibbs()
}
init_pars$kappa0
library(ggplot2)
setwd('~/Documents/MixSigBkg/R/')
Rcpp::sourceCpp('./helpers.cpp')
source('_component.R')
source('_mixture.R')
source('_dpsignal.R')
source('_mfmsignal.R')
source('_dpsignal.R')
source('helpers.R')
source('visualisation.R')
data = data_gmm
# plot data
ggplot(data = data.frame(x = data$X[,1], y = data$X[,2])) + geom_point(aes(x, y))
# prepare to run Gibbs
X = as.matrix(data$X)
Ks = 10
Kb = 1
s = rep(1, nrow(X))
sz = kmeans(x = X, Ks)$cluster
bz = rep(0, nrow(X))
init_pars <- get_GMVNComponent_example_init_pars(2)
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
sig_componentClass = GMVNComponent,
sig_init_pars = init_pars, type = 'MFMSignal')
# run Gibbs
niters = 10
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
for(k in 1:Ks) {
print(paste(c('Signal cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$gibbs()
}
m$signal[[1]]$K
m = Mixture(Ks = Ks, Kb = Kb, D = 2, X = X, s = s, sz = sz, bz = bz,
sig_componentClass = GMVNComponent,
sig_init_pars = init_pars, type = 'MFMSignal')
# run Gibbs
niters = 10
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
Ks <- m$signal[[1]]$K
for(k in 1:Ks) {
print(paste(c('Signal cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$gibbs()
}
# run Gibbs
niters = 50
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
Ks <- m$signal[[1]]$K
for(k in 1:Ks) {
print(paste(c('Signal cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$gibbs()
}
# run Gibbs
niters = 50
for(i in 1:niters) {
if (i == 1 || i %% 5 == 0 ) {
print(paste(c('iter:', i)))
print(paste(c('Number of clusters', m$signal[[1]]$K)))
print(plot_2D_MM_signal(m))
Ks <- m$signal[[1]]$K
for(k in 1:Ks) {
print(paste(c('Signal cluster k size:', m$signal[[1]]$components[[k]]$N)))
}
}
m$gibbs()
}
